/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on 13/08/2011, 23:18:53
 */
package gui;

import logica.*;
import Main.Main;   // Para poder usar limpiarResumenes()
import java.awt.event.*;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.*;
import javax.swing.JOptionPane;

/**
 *
 * @author pablo
 */
public class MainWindow extends javax.swing.JFrame {

    // El logger solo para esta clase
    private final static Logger LOGGER = Logger.getLogger(MainWindow.class .getName());
    // Estacion base existe siempre
    private static EstacionBase base;
    // Estado de la simulacion: Corriendo=true, parada= false
    private boolean corriendo;
    
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonesToolBar = new javax.swing.JToolBar();
        ejemploLabel = new javax.swing.JLabel();
        cargarEjemploButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        estacionLabel = new javax.swing.JLabel();
        agregarEstacionButton = new javax.swing.JButton();
        eliminarEstacionButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        sensorLabel = new javax.swing.JLabel();
        agregarSensorButton = new javax.swing.JButton();
        eliminarSensorButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        startStopToggleButton = new javax.swing.JToggleButton();
        estadoToolBar = new javax.swing.JToolBar();
        estadoLabel = new javax.swing.JLabel();
        principalSplitPane = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        redTree = new javax.swing.JTree();
        salidaScrollPane = new javax.swing.JScrollPane();
        salidaTextPane = new javax.swing.JTextPane();
        principalMenuBar = new javax.swing.JMenuBar();
        simulacionMenu = new javax.swing.JMenu();
        crearRedMenu = new javax.swing.JMenu();
        agregarEstacionMenuItem = new javax.swing.JMenuItem();
        eliminarEstacionMenuItem = new javax.swing.JMenuItem();
        agregarSensorMenuItem = new javax.swing.JMenuItem();
        eliminarSensorMenuItem = new javax.swing.JMenuItem();
        cargarEjemploMenuItem = new javax.swing.JMenuItem();
        estadoMenu = new javax.swing.JMenu();
        comenzarMenuItem = new javax.swing.JMenuItem();
        pararMenuItem = new javax.swing.JMenuItem();
        salirMenuItem = new javax.swing.JMenuItem();
        resumenesMenu = new javax.swing.JMenu();
        verResumenesMenuItem = new javax.swing.JMenuItem();
        limpiarResumenesMenuItem = new javax.swing.JMenuItem();
        ayudaMenu = new javax.swing.JMenu();
        ayudaMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonesToolBar.setFloatable(false);
        botonesToolBar.setRollover(true);
        botonesToolBar.setBorderPainted(false);

        ejemploLabel.setText("Ejemplo");
        botonesToolBar.add(ejemploLabel);

        cargarEjemploButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/fileopen.png"))); // NOI18N
        cargarEjemploButton.setToolTipText("Crea una red con un precreada");
        cargarEjemploButton.setFocusable(false);
        cargarEjemploButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cargarEjemploButton.setMaximumSize(new java.awt.Dimension(40, 40));
        cargarEjemploButton.setMinimumSize(new java.awt.Dimension(40, 40));
        cargarEjemploButton.setPreferredSize(new java.awt.Dimension(40, 40));
        cargarEjemploButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cargarEjemploButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarEjemploMenuItemActionPerformed(evt);
            }
        });
        botonesToolBar.add(cargarEjemploButton);
        botonesToolBar.add(jSeparator1);

        estacionLabel.setText("Estacion");
        botonesToolBar.add(estacionLabel);

        agregarEstacionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/plus_32x32.png"))); // NOI18N
        agregarEstacionButton.setToolTipText("Crear nueva red");
        agregarEstacionButton.setFocusable(false);
        agregarEstacionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        agregarEstacionButton.setMaximumSize(new java.awt.Dimension(40, 40));
        agregarEstacionButton.setMinimumSize(new java.awt.Dimension(40, 40));
        agregarEstacionButton.setPreferredSize(new java.awt.Dimension(40, 40));
        agregarEstacionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        agregarEstacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarEstacionMenuItemActionPerformed(evt);
            }
        });
        botonesToolBar.add(agregarEstacionButton);

        eliminarEstacionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/minus_32x32.png"))); // NOI18N
        eliminarEstacionButton.setToolTipText("Crear nueva red");
        eliminarEstacionButton.setFocusable(false);
        eliminarEstacionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eliminarEstacionButton.setMaximumSize(new java.awt.Dimension(40, 40));
        eliminarEstacionButton.setMinimumSize(new java.awt.Dimension(40, 40));
        eliminarEstacionButton.setPreferredSize(new java.awt.Dimension(40, 40));
        eliminarEstacionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eliminarEstacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarEstacionMenuItemActionPerformed(evt);
            }
        });
        botonesToolBar.add(eliminarEstacionButton);
        botonesToolBar.add(jSeparator2);

        sensorLabel.setText("Sensor");
        botonesToolBar.add(sensorLabel);

        agregarSensorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/plus_32x32.png"))); // NOI18N
        agregarSensorButton.setToolTipText("Crear nueva red");
        agregarSensorButton.setFocusable(false);
        agregarSensorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        agregarSensorButton.setMaximumSize(new java.awt.Dimension(40, 40));
        agregarSensorButton.setMinimumSize(new java.awt.Dimension(40, 40));
        agregarSensorButton.setPreferredSize(new java.awt.Dimension(40, 40));
        agregarSensorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        agregarSensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarSensorMenuItemActionPerformed(evt);
            }
        });
        botonesToolBar.add(agregarSensorButton);

        eliminarSensorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/minus_32x32.png"))); // NOI18N
        eliminarSensorButton.setToolTipText("Crear nueva red");
        eliminarSensorButton.setFocusable(false);
        eliminarSensorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eliminarSensorButton.setMaximumSize(new java.awt.Dimension(40, 40));
        eliminarSensorButton.setMinimumSize(new java.awt.Dimension(40, 40));
        eliminarSensorButton.setPreferredSize(new java.awt.Dimension(40, 40));
        eliminarSensorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eliminarSensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarSensorMenuItemActionPerformed(evt);
            }
        });
        botonesToolBar.add(eliminarSensorButton);
        botonesToolBar.add(filler1);

        startStopToggleButton.setText("start / stop");
        startStopToggleButton.setToolTipText("Inicia o para la simulacion");
        startStopToggleButton.setFocusable(false);
        startStopToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startStopToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startStopToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopToggleButtonActionPerformed(evt);
            }
        });
        botonesToolBar.add(startStopToggleButton);

        estadoToolBar.setFloatable(false);
        estadoToolBar.setRollover(true);

        estadoLabel.setText("Estado: parada");
        estadoLabel.setFocusable(false);
        estadoToolBar.add(estadoLabel);

        principalSplitPane.setDividerLocation(140);
        principalSplitPane.setDividerSize(5);

        treeScrollPane.setViewportView(redTree);

        principalSplitPane.setLeftComponent(treeScrollPane);

        salidaTextPane.setEditable(false);
        salidaScrollPane.setViewportView(salidaTextPane);

        principalSplitPane.setRightComponent(salidaScrollPane);

        simulacionMenu.setText("Simulacion");

        crearRedMenu.setText("Nueva Red");

        agregarEstacionMenuItem.setText("Agregar estacion");
        agregarEstacionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarEstacionMenuItemActionPerformed(evt);
            }
        });
        crearRedMenu.add(agregarEstacionMenuItem);

        eliminarEstacionMenuItem.setText("Eliminar estacion");
        eliminarEstacionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarEstacionMenuItemActionPerformed(evt);
            }
        });
        crearRedMenu.add(eliminarEstacionMenuItem);

        agregarSensorMenuItem.setText("Agregar sensor");
        agregarSensorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarSensorMenuItemActionPerformed(evt);
            }
        });
        crearRedMenu.add(agregarSensorMenuItem);

        eliminarSensorMenuItem.setText("Eliminar sensor");
        eliminarSensorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarSensorMenuItemActionPerformed(evt);
            }
        });
        crearRedMenu.add(eliminarSensorMenuItem);

        simulacionMenu.add(crearRedMenu);

        cargarEjemploMenuItem.setText("Cargar ejemplo");
        cargarEjemploMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarEjemploMenuItemActionPerformed(evt);
            }
        });
        simulacionMenu.add(cargarEjemploMenuItem);

        estadoMenu.setText("Estado");

        comenzarMenuItem.setText("Comenzar");
        comenzarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comenzarMenuItemActionPerformed(evt);
            }
        });
        estadoMenu.add(comenzarMenuItem);

        pararMenuItem.setText("Parar");
        pararMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararMenuItemActionPerformed(evt);
            }
        });
        estadoMenu.add(pararMenuItem);

        simulacionMenu.add(estadoMenu);

        salirMenuItem.setText("Salir");
        salirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuItemActionPerformed(evt);
            }
        });
        simulacionMenu.add(salirMenuItem);

        principalMenuBar.add(simulacionMenu);

        resumenesMenu.setText("Resumenes");

        verResumenesMenuItem.setText("Ver resumenes");
        verResumenesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verResumenesMenuItemActionPerformed(evt);
            }
        });
        resumenesMenu.add(verResumenesMenuItem);

        limpiarResumenesMenuItem.setText("Limpiar resumenes");
        limpiarResumenesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarResumenesMenuItemActionPerformed(evt);
            }
        });
        resumenesMenu.add(limpiarResumenesMenuItem);

        principalMenuBar.add(resumenesMenu);

        ayudaMenu.setText("Ayuda");

        ayudaMenuItem.setText("Ayuda");
        ayudaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ayudaMenuItemActionPerformed(evt);
            }
        });
        ayudaMenu.add(ayudaMenuItem);

        aboutMenuItem.setText("About");
        ayudaMenu.add(aboutMenuItem);

        principalMenuBar.add(ayudaMenu);

        setJMenuBar(principalMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(botonesToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
            .addComponent(estadoToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
            .addComponent(principalSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(botonesToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(principalSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadoToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void ayudaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ayudaMenuItemActionPerformed
    JOptionPane.showMessageDialog(null, "Panel de ayuda no implementado todavia.", "Ayuda", JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_ayudaMenuItemActionPerformed

private void limpiarResumenesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarResumenesMenuItemActionPerformed
    Main.limpiarResumenesDir();
}//GEN-LAST:event_limpiarResumenesMenuItemActionPerformed

private void verResumenesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verResumenesMenuItemActionPerformed
    this.getResumen();
}//GEN-LAST:event_verResumenesMenuItemActionPerformed

private void cargarEjemploMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarEjemploMenuItemActionPerformed
    this.ejemplo1();
}//GEN-LAST:event_cargarEjemploMenuItemActionPerformed

private void agregarEstacionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarEstacionMenuItemActionPerformed
    this.agregarEstacion();
}//GEN-LAST:event_agregarEstacionMenuItemActionPerformed

private void agregarSensorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarSensorMenuItemActionPerformed
    this.agregarSensor();
}//GEN-LAST:event_agregarSensorMenuItemActionPerformed

private void eliminarEstacionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarEstacionMenuItemActionPerformed
    this.eliminarEstacion();
}//GEN-LAST:event_eliminarEstacionMenuItemActionPerformed

private void eliminarSensorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarSensorMenuItemActionPerformed
    this.eliminarSensor();
}//GEN-LAST:event_eliminarSensorMenuItemActionPerformed

private void salirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuItemActionPerformed
    if (corriendo) {
        this.stop();
    } 
    System.exit(0);
}//GEN-LAST:event_salirMenuItemActionPerformed

private void comenzarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comenzarMenuItemActionPerformed
    this.start();
}//GEN-LAST:event_comenzarMenuItemActionPerformed

private void pararMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararMenuItemActionPerformed
    this.stop();
}//GEN-LAST:event_pararMenuItemActionPerformed

private void startStopToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopToggleButtonActionPerformed
    if ( startStopToggleButton.isSelected() )
        comenzarMenuItemActionPerformed(evt);
    else
        pararMenuItemActionPerformed(evt);
}//GEN-LAST:event_startStopToggleButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Creo la estacion base
        try {
            base = new EstacionBase();
        } catch (CreacionException ex) {
            String mensaje = String.format("Error critico! \nNo se pudo crear "
                    + "la estacion base.");
            JOptionPane.showMessageDialog(null, mensaje, "Error crítico", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton agregarEstacionButton;
    private javax.swing.JMenuItem agregarEstacionMenuItem;
    private javax.swing.JButton agregarSensorButton;
    private javax.swing.JMenuItem agregarSensorMenuItem;
    private javax.swing.JMenu ayudaMenu;
    private javax.swing.JMenuItem ayudaMenuItem;
    private javax.swing.JToolBar botonesToolBar;
    private javax.swing.JButton cargarEjemploButton;
    private javax.swing.JMenuItem cargarEjemploMenuItem;
    private javax.swing.JMenuItem comenzarMenuItem;
    private javax.swing.JMenu crearRedMenu;
    private javax.swing.JLabel ejemploLabel;
    private javax.swing.JButton eliminarEstacionButton;
    private javax.swing.JMenuItem eliminarEstacionMenuItem;
    private javax.swing.JButton eliminarSensorButton;
    private javax.swing.JMenuItem eliminarSensorMenuItem;
    private javax.swing.JLabel estacionLabel;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JMenu estadoMenu;
    private javax.swing.JToolBar estadoToolBar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JMenuItem limpiarResumenesMenuItem;
    private javax.swing.JMenuItem pararMenuItem;
    private javax.swing.JMenuBar principalMenuBar;
    private javax.swing.JSplitPane principalSplitPane;
    private javax.swing.JTree redTree;
    private javax.swing.JMenu resumenesMenu;
    private javax.swing.JScrollPane salidaScrollPane;
    private javax.swing.JTextPane salidaTextPane;
    private javax.swing.JMenuItem salirMenuItem;
    private javax.swing.JLabel sensorLabel;
    private javax.swing.JMenu simulacionMenu;
    private javax.swing.JToggleButton startStopToggleButton;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JMenuItem verResumenesMenuItem;
    // End of variables declaration//GEN-END:variables

    /* *** Metodos propios *** */
    
    /**
     * Imprime en una pantalla la ubicacion de los resumenes
     */
    private void getResumen() {
        if (base == null)   // No deberia entrar nunca
            JOptionPane.showMessageDialog(null, "Debe crear una estacion base", "Error", JOptionPane.ERROR_MESSAGE);
        
        Vector<String> direcciones = base.getResumen();
        String mensaje = "Los resumenes se encuentran en: ";
        for (String dir : direcciones) {
            mensaje = mensaje + String.format("\n\t%s", dir);
        }

        JOptionPane.showMessageDialog(null, mensaje, "Resumenes", JOptionPane.PLAIN_MESSAGE);
    }
    
    /**
     * Se carga un ejemplo en el simulador
     */
    private EstacionBase ejemplo1() {
        EstacionBase base = null;
            EstacionMet met1 = null;
                SensorHum sensor1 = null;
            EstacionMet met2 = null;
                SensorViento sensor2 = null;
                SensorTemp sensor3 = null;
            EstacionMet met3 = null;
                SensorHum sensor5 = null;
                EstacionMet met4 = null;
                    SensorPluv sensor4 = null;
                
        try {
            // Creo estacion Base
            base = new EstacionBase();
            
                // Creo una subestacion
                met1 = new EstacionMet();
                
                    // Creo Sensores
                    sensor1 = new SensorHum();
                    // Agrego los sensores a la sub estacion
                    met1.agregarSensor(sensor1, met1.getID());

                // Agrego la subestacion a la estacion base
                base.agregarEstacion(met1, base.getID());
                
                // Creo una subestacion
                met2 = new EstacionMet();
                
                    // Creo Sensores
                    sensor2 = new SensorViento();
                    sensor3 = new SensorTemp();
                    
                    // Agrego los sensores a la sub estacion
                    met2.agregarSensor(sensor2, met2.getID());
                    met2.agregarSensor(sensor3, met2.getID());

                // Agrego la subestacion a la estacion base
                base.agregarEstacion(met2, base.getID());
                
                // Creo una subestacion
                met3 = new EstacionMet();
                
                    // Creo Sensores
                    sensor5 = new SensorHum();
                    // Agrego los sensores a la sub estacion
                    met3.agregarSensor(sensor5, met3.getID());

                    // Creo una subestacion
                    met4 = new EstacionMet();

                        // Creo Sensores
                        sensor4 = new SensorPluv();
                        // Agrego los sensores a la sub estacion
                        met4.agregarSensor(sensor4, met4.getID());

                    // Agrego la subestacion a la estacion base
                    met3.agregarEstacion(met4, met3.getID());

                // Agrego la subestacion a la estacion base
                base.agregarEstacion(met3, base.getID());
                
        } catch (CreacionException ex) {
            Logger.getLogger(SimGui.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
        
        return base;
    }

    /**
     * @bief Agregar una estacion a la red actual
     * 
     * Se agrega una estacion a la red actual siempre y cuando se pueda crear 
     * una nueva estacion.
     * Todo el proceso es guiado por ventanas.
     */
    private void agregarEstacion() {
        Vector<Integer> estacionesID = new Vector();
        Integer padreID = null;
        String mensaje = "Seleccione bajo que Estacion debe agregarse: ";
        String titulo = "Agregando estacion";
        int tipo = JOptionPane.PLAIN_MESSAGE;
        
        // Cargo todos los id de las estaciones existentes
        for (int i=0; i<Estacion.getSiguienteID(); i++) {
            estacionesID.add( new Integer(i) );
        }
        
        // Pregunto donde se quiere agregar
        padreID = (Integer)JOptionPane.showInputDialog(null, mensaje, titulo, 
                tipo, null, estacionesID.toArray(), estacionesID.firstElement());
        
        if (padreID != null) {  // Si se eligio
            // Creo estacion y la agrego si se puede
            try {
                // Para poder pedir el nombre luego
                Estacion nuevaEstacion = new EstacionMet();
                boolean insertada = false;
                
                // Agrego estacion a la red
                insertada = base.agregarEstacion( nuevaEstacion, padreID.intValue());
                
                if (insertada) {    // Si se agrego correctamente aviso
                    titulo = titulo + ": exito";
                    mensaje = String.format("Se ha agregado la %s en la red de"
                            + " la Estacion%d.", nuevaEstacion.toString(), padreID);
                    tipo = JOptionPane.INFORMATION_MESSAGE;
                }
                else {              // No se se pudo agregar aviso
                    titulo = titulo + ": error";
                    mensaje = String.format("No se ha podido agregar la %s en"
                            + " la red de la Estacion%d.", nuevaEstacion.toString(), padreID);
                    tipo = JOptionPane.ERROR_MESSAGE;
                }
                
                // Levanto la ventana de informacion
                JOptionPane.showMessageDialog(null, mensaje, titulo, tipo);
                    
            } catch (CreacionException ex) {
                titulo = titulo + ": error";
                mensaje = String.format("No se ha podido crear la estacion. "
                        + "Intente nuevamente.");
                tipo = JOptionPane.ERROR_MESSAGE;
            }
        }
    }
    
    /**
     * @bief Agregar un sensor a la red actual
     * 
     * Se agrega un sensor a la red actual.
     * Todo el proceso es guiado por ventanas.
     */
    private void agregarSensor() {
        Vector<Integer> estacionesID = new Vector();
        String[] sensoresTipo = {"Humedad", "Temperatura", "Viento", "Pluviometro"};
        Integer padreID = null;
        String mensaje = "Seleccione bajo que Estacion debe agregarse: ";
        String titulo = "Agregando sensor";
        int tipo = JOptionPane.PLAIN_MESSAGE;
        
        // Cargo todos los id de las estaciones existentes
        for (int i=0; i<Estacion.getSiguienteID(); i++) {
            estacionesID.add( new Integer(i) );
        }
        
        // Pregunto donde se quiere agregar
        padreID = (Integer)JOptionPane.showInputDialog(null, mensaje, titulo, 
                tipo, null, estacionesID.toArray(), estacionesID.firstElement());
        
        if (padreID != null) {  // Si se eligio
            // Pregunto tipo
            mensaje = "Seleccione el tipo de sensor";
            tipo = JOptionPane.showOptionDialog(null, mensaje, titulo, 
                    JOptionPane.DEFAULT_OPTION, tipo, null, sensoresTipo, null);
            
            // Creo sensor y la agrego si se puede
            Sensor nuevoSensor = null;
            boolean insertada = false;
            
            switch (tipo) {
                case 0: nuevoSensor = new SensorHum();
                case 1: nuevoSensor = new SensorTemp();
                case 2: nuevoSensor = new SensorViento();
                case 3: nuevoSensor = new SensorPluv();
            }

            // Agrego estacion a la red
            insertada = base.agregarSensor( nuevoSensor, padreID.intValue());

            if (insertada) {    // Si se agrego correctamente aviso
                titulo = titulo + ": exito";
                mensaje = String.format("Se ha agregado el sensor en la red de"
                        + " la Estacion%d.", padreID);
                tipo = JOptionPane.INFORMATION_MESSAGE;
            }
            else {              // No se se pudo agregar aviso
                titulo = titulo + ": error";
                mensaje = String.format("No se ha podido agregar el sensor en"
                        + " la red de la Estacion%d.", padreID);
                tipo = JOptionPane.ERROR_MESSAGE;
            }

            // Levanto la ventana de informacion
            JOptionPane.showMessageDialog(null, mensaje, titulo, tipo);
        }
    }

    /**
     * @bief Elimina un sensor a la red actual
     * 
     * Se elimina un sensor a la red actual.
     * Todo el proceso es guiado por ventanas.
     */
    private void eliminarEstacion() {
        Vector<Integer> estacionesID = new Vector();
        Integer estacionID = null;
        String mensaje = "Seleccione el ID de la estacion a eliminar: ";
        String titulo = "Eliminando estacion";
        int tipo = JOptionPane.PLAIN_MESSAGE;
        
        // Cargo todos los id de las estaciones existentes
        for (int i=1; i<Estacion.getSiguienteID(); i++) {
            estacionesID.add( new Integer(i) );
        }
        
        // Pregunto el id de la estacion a eliminar
        estacionID = (Integer)JOptionPane.showInputDialog(null, mensaje, titulo, 
                tipo, null, estacionesID.toArray(), null);
        
        if (estacionID != null) {  // Si se eligio, elimino la estacion
            boolean eliminada = false;

            // Elimino estacion de la red
            eliminada = base.eliminarEstacion( estacionID.intValue() );

            if (eliminada) {    // Si se elimino correctamente, aviso
                titulo = titulo + ": exito";
                mensaje = String.format("Se ha eliminado la Estacion%d en la"
                        + " red.", estacionID);
                tipo = JOptionPane.INFORMATION_MESSAGE;
            }
            else {              // No se se pudo eliminar, aviso
                titulo = titulo + ": error";
                mensaje = String.format("No se ha podido eliminar la "
                        + "Estacion%d de la red.", estacionID);
                tipo = JOptionPane.ERROR_MESSAGE;
            }

            // Levanto la ventana de informacion
            JOptionPane.showMessageDialog(null, mensaje, titulo, tipo);
        }
    }

    private void eliminarSensor() {
        Vector<Integer> sensoresID = new Vector();
        Integer sensorID = null;
        String mensaje = "Seleccione el ID del sensor a eliminar: ";
        String titulo = "Eliminando sensor";
        int tipo = JOptionPane.PLAIN_MESSAGE;
        
        // Cargo todos los id de las estaciones existentes
        for (int i=1000; i<Sensor.getSiguienteID(); i++) {
            sensoresID.add( new Integer(i) );
        }
        
        // Pregunto el id del sensor a eliminar
        sensorID = (Integer)JOptionPane.showInputDialog(null, mensaje, titulo, 
                tipo, null, sensoresID.toArray(), null);
        
        if (sensorID != null) {  // Si se eligio, elimino el sensor
            boolean eliminado = false;

            // Elimino estacion de la red
            eliminado = base.eliminarSensor( sensorID.intValue() );

            if (eliminado) {    // Si se elimino correctamente, aviso
                titulo = titulo + ": exito";
                mensaje = "Se ha eliminado el sensor de la red";
                tipo = JOptionPane.INFORMATION_MESSAGE;
            }
            else {              // No se se pudo eliminar, aviso
                titulo = titulo + ": error";
                mensaje = "No se ha podido eliminar el sensor de la red";
                tipo = JOptionPane.ERROR_MESSAGE;
            }

            // Levanto la ventana de informacion
            JOptionPane.showMessageDialog(null, mensaje, titulo, tipo);
        }
    }

    private void start() {
        boolean stop = false;
        boolean sigo = false;
        Stack<PaqueteDatos> datos = new Stack();
        TimerListener timerListener;
        javax.swing.Timer timer;

        startStopToggleButton.setSelected(true);
        corriendo = true;
        estadoLabel.setText("Estado: corriendo");

        // Creo el listener e inicio el timer
        timerListener = new TimerListener();
        timer = new javax.swing.Timer(1000, timerListener);

        while(stop != true) {
            System.out.println("Esperando actualizacion... ");
            timer.restart();
            
            while (!sigo && !stop) {
                // Miro si se activo el timer
                sigo = timerListener.getEstado();
                // Miro si se apreto stop (startStopToggleButton)
                stop = corriendo;
            }
            
            // Paro el timer
            timer.stop();
            
            // Actualizo
            datos = base.actualizar();
            
            // Muestro info
            while( !(datos.empty()) ) {
                datos.pop().printDatos();
            }
            
            // Reinicion variables
            sigo = false;
            timerListener.reset();
        }
        
        estadoLabel.setText("Estado: corriendo");
        corriendo = false;  // No es necesario
        startStopToggleButton.setSelected(false);
    }

    private void stop() {
        corriendo = false;
    }
    
    /* *** Clase para trabajar con el timer *** */
    static class TimerListener implements ActionListener {
        // Un estado para avisar que se disparo el timer
        private boolean activar;
        
        public void actionPerformed(ActionEvent e) {
            // Se disparo el timer
            activar = true;
        }
        
        public boolean getEstado() { 
            if (activar)
                // Si no pongo esto, no funciona ¿WTF?
                System.out.println();
            
            return activar; 
        }
        
        public void reset() { 
            activar = false;
        }
    }

}
